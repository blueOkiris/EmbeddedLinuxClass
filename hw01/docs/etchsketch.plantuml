@startuml etch-a-sketch-class

class Main {
    main(argv : List[str])
}

namespace PresentationLayer {
    class Display {
        - size : Tuple[int, int]
        - grid : List[str]

        + Display(size : Tuple[int, int])
        + print()
        + copyDrawBuffer(buff : DrawBuffer)
        + size() : Tuple[int, int]
        + debugInfo() : str
    }

    class CliApplication {
        - onLinux : bool
        - key : str
        - quit : bool
        - inputThread : Thread

        + CliApplication()
        + inputAsync()
        + start(updateThread, disp : Display)
        - readKey() : str
        - clearCli()
    }

    class CliProcessor {
        - args : List[str]
        - displaySize : Tuple[int, int]
        - startPos : Tuple[int, int]
        - success : bool
        - startPosChanged : Tuple[bool, bool]

        + CliProcessor(args : List[str])
        + successful() : bool
        + displaySize() : Tuple[int, int]
        + startPosition() : Tuple[int, int]
        - processArg(arg : str)
        - printHelp()
    }

    CliApplication --> Display
}

namespace DomainLayer {
    class Game {
        - reset : bool
        - startPos : Tuple[int, int]
        - cursorPos : Tuple[int, int]
        - directionPressed : List[bool]
        - clearPressed : bool
        - directionReleased : List[bool]
        - clearReleased : bool
        
        + Game(startPos : Tuple[int, int])
        + update(key : str, buff : DrawBuffer) : DrawBuffer
        - updateKeys(key : str)
    }
}

namespace DataLayer {
    class DrawBuffer {
        - size : Tuple[int, int]
        - buff : List[List[bool]]

        + size() : Tuple[int, int]
        + setPoint(point : Tuple[int, int], value : bool)
        + getPoint(point : Tuple[int, int]) : bool
        + clear()
    }
}

Main ..> PresentationLayer.CliProcessor
Main ..> PresentationLayer.CliApplication
Main ...> PresentationLayer.Display
Main ....> DomainLayer.Game
PresentationLayer.CliApplication ...> DataLayer.DrawBuffer
PresentationLayer.CliApplication --> DomainLayer.Game
DomainLayer.Game --> DataLayer.DrawBuffer

@enduml

@startuml etch-a-sketch-seq

actor Player

box PresentationLayer

participant CliApplication
participant Display

endbox

box DomainLayer

participant Game

end box

box DataLayer

entity DrawBuffer

end box

== Main Loop ==

alt main thread

loop until quit

CliApplication -> Game : update(current draw buffer)
Game -> DrawBuffer : set points, clear points, etc
Game --> CliApplication : new draw buffer
CliApplication -> Display : copyDrawBuffer(drawBuffer)

loop all rows

loop all columns

Display -> DrawBuffer : getPoint((col, row))
DrawBuffer --> Display : value at point

end

end

CliApplication -> Display : print()
Display --> Player : output

end

else key update thread

loop until quit

CliApplication -> Player : getch()
Player --> CliApplication : key

end

end

== Movement ==

Player -> CliApplication : wasd pressed
CliApplication -> Game : update(key, currBuff)
Game -> Game : updateKeys - pressed set
CliApplication -> Game : update(key, currBuff)
Game -> Game : updateKeys - released set
Game -> Game : do game logic stuff
Game --> CliApplication : new buffer

== Clearing ==

Player -> CliApplication : e pressed
CliApplication -> Game : update(key, currBuf)
Game -> Game : updateKeys - pressed set
CliApplication -> Game : update(key, currBuf)
Game -> Game : updateKeys - released set
Game -> DrawBuffer : clear()
Game --> CliApplication : new (cleared) buffer

== Quiting ==

Player -> CliApplication : q pressed
CliApplication -> CliApplication : quit = true

@enduml
