@startuml etch-a-sketch-class

class Program {
    main(argv : List[str])
}

namespace PresentationLayer {
    interface Display {
        + Display(size : Tuple[int, int])
        + start(application : Application)
        + print()
        + copyDrawBuffer(buff : DrawBuffer)
        + size() : Tuple[int, int]
    }

    class CliDisplay {
        - onLinux : bool
        - size : Tuple[int, int]
        - grid : List[str]
        - quit : bool
        - inpt : CliInputHandler

        + CliDisplay(size : Tuple[int, int])
        + start(application : Application)
        + print()
        + copyDrawBuffer(buff : DrawBuffer)
        - clearCli()
        + size() : Tuple[int, int]
        + debugInfo() : str
    }

    class CliProcessor {
        - args : List[str]
        - displaySize : Tuple[int, int]
        - startPos : Tuple[int, int]
        - success : bool
        - startPosChanged : Tuple[bool, bool]

        + CliProcessor(args : List[str])
        + successful() : bool
        + displaySize() : Tuple[int, int]
        + startPosition() : Tuple[int, int]
        + inputHandlerFactory() : InputHandler
        - processArg(arg : str)
        - printHelp()
    }

    class InputHandler {
        - queue : Queue
        - updateThread : Process

        + InputHandler(updatFunction)
        + getKey() : str
        + start()
        + quit()
    }

    class PushButtonInputHandler {
        - {static} pushButtonUpdateInput(queue : Queue)
        + PushButtonInputHandler(btns : Dict[Str, Tuple[int, str]])
    }

    class CliInputHandler {
        - {static} cliUpdateInput(queue : Queue)
        + CliInputHandler()
    }

    CliProcessor ..> InputHandler
    CliDisplay -l-> InputHandler
    CliDisplay -u-|> Display
    CliInputHandler -u-|> InputHandler
    PushButtonInputHandler -u-|> InputHandler
}

namespace DomainLayer {
    class Application {
        - queue : Queue
        - updateThread : Process

        + {static} updateApplication(queue : Queue)

        + Application()
        + start()
        + quit()
        + setKey(key : str)
        + hasQuit() : bool
        + getBuffer() : DrawBuffer
    }

    class Game {
        - reset : bool
        - startPos : Tuple[int, int]
        - cursorPos : Tuple[int, int]
        - directionPressed : List[bool]
        - clearPressed : bool
        - directionReleased : List[bool]
        - clearReleased : bool
        
        + Game(startPos : Tuple[int, int])
        + update(key : str, buff : DrawBuffer) : DrawBuffer
        - updateKeys(key : str)
    }

    Application -> Game
}

namespace DataLayer {
    class DrawBuffer {
        - size : Tuple[int, int]
        - buff : List[List[bool]]

        + size() : Tuple[int, int]
        + setPoint(point : Tuple[int, int], value : bool)
        + getPoint(point : Tuple[int, int]) : bool
        + clear()
    }

    class AppState {
        + handled : bool
        + key : str
        + buffer : DrawBuffer
        + updateFunc
        + shouldQuit : bool
    }
}

Program ..> PresentationLayer.CliProcessor
Program ...> DomainLayer.Game
Program ...> DomainLayer.Application
Program ..> PresentationLayer.Display
PresentationLayer.Display -----> DomainLayer.Application
PresentationLayer.Display -----> DataLayer.DrawBuffer
DomainLayer.Application ..> DataLayer.AppState
DomainLayer.Application ..> DataLayer.DrawBuffer
DomainLayer.Game ..> DataLayer.DrawBuffer

@enduml
